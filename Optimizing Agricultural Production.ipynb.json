{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1f2de548",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from ipywidgets import interact"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "39ea788a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(r'/Users/abi/Desktop/Agriculture.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "54836379",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "      <th>P</th>\n",
       "      <th>K</th>\n",
       "      <th>temperature</th>\n",
       "      <th>humidity</th>\n",
       "      <th>ph</th>\n",
       "      <th>rainfall</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>78</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>20.130175</td>\n",
       "      <td>81.604873</td>\n",
       "      <td>7.628473</td>\n",
       "      <td>262.717340</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2195</th>\n",
       "      <td>107</td>\n",
       "      <td>34</td>\n",
       "      <td>32</td>\n",
       "      <td>26.774637</td>\n",
       "      <td>66.413269</td>\n",
       "      <td>6.780064</td>\n",
       "      <td>177.774507</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2196</th>\n",
       "      <td>99</td>\n",
       "      <td>15</td>\n",
       "      <td>27</td>\n",
       "      <td>27.417112</td>\n",
       "      <td>56.636362</td>\n",
       "      <td>6.086922</td>\n",
       "      <td>127.924610</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2197</th>\n",
       "      <td>118</td>\n",
       "      <td>33</td>\n",
       "      <td>30</td>\n",
       "      <td>24.131797</td>\n",
       "      <td>67.225123</td>\n",
       "      <td>6.362608</td>\n",
       "      <td>173.322839</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2198</th>\n",
       "      <td>117</td>\n",
       "      <td>32</td>\n",
       "      <td>34</td>\n",
       "      <td>26.272418</td>\n",
       "      <td>52.127394</td>\n",
       "      <td>6.758793</td>\n",
       "      <td>127.175293</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2199</th>\n",
       "      <td>104</td>\n",
       "      <td>18</td>\n",
       "      <td>30</td>\n",
       "      <td>23.603016</td>\n",
       "      <td>60.396475</td>\n",
       "      <td>6.779833</td>\n",
       "      <td>140.937041</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2200 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        N   P   K  temperature   humidity        ph    rainfall   label\n",
       "0      90  42  43    20.879744  82.002744  6.502985  202.935536    rice\n",
       "1      85  58  41    21.770462  80.319644  7.038096  226.655537    rice\n",
       "2      60  55  44    23.004459  82.320763  7.840207  263.964248    rice\n",
       "3      74  35  40    26.491096  80.158363  6.980401  242.864034    rice\n",
       "4      78  42  42    20.130175  81.604873  7.628473  262.717340    rice\n",
       "...   ...  ..  ..          ...        ...       ...         ...     ...\n",
       "2195  107  34  32    26.774637  66.413269  6.780064  177.774507  coffee\n",
       "2196   99  15  27    27.417112  56.636362  6.086922  127.924610  coffee\n",
       "2197  118  33  30    24.131797  67.225123  6.362608  173.322839  coffee\n",
       "2198  117  32  34    26.272418  52.127394  6.758793  127.175293  coffee\n",
       "2199  104  18  30    23.603016  60.396475  6.779833  140.937041  coffee\n",
       "\n",
       "[2200 rows x 8 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a9c96859",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "N              0\n",
       "P              0\n",
       "K              0\n",
       "temperature    0\n",
       "humidity       0\n",
       "ph             0\n",
       "rainfall       0\n",
       "label          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9141d7d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rice           100\n",
       "maize          100\n",
       "jute           100\n",
       "cotton         100\n",
       "coconut        100\n",
       "papaya         100\n",
       "orange         100\n",
       "apple          100\n",
       "muskmelon      100\n",
       "watermelon     100\n",
       "grapes         100\n",
       "mango          100\n",
       "banana         100\n",
       "pomegranate    100\n",
       "lentil         100\n",
       "blackgram      100\n",
       "mungbean       100\n",
       "mothbeans      100\n",
       "pigeonpeas     100\n",
       "kidneybeans    100\n",
       "chickpea       100\n",
       "coffee         100\n",
       "Name: label, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['label'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e47057a2",
   "metadata": {},
   "source": [
    "### Minimum Requirements for all the crops\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6fda1c22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " ...]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.label.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9df1d168",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Ratio of Nitogen in the soil :50.551818\n",
      "Average Ratio of Phosphorous in the soil :53.362727\n",
      "Average Ratio of Potassuim in the soil :48.149091\n",
      "Average Temperature in Celsuis :25.616244\n",
      "Average Relative Humidity in % :71.481779\n",
      "Average PH value  in the soil :6.469480\n",
      "Average Rainfall in mm :103.463655\n"
     ]
    }
   ],
   "source": [
    "print(\"Average Ratio of Nitogen in the soil :{0:2f}\".format(data['N'].mean()))\n",
    "print(\"Average Ratio of Phosphorous in the soil :{0:2f}\".format(data['P'].mean()))\n",
    "print(\"Average Ratio of Potassuim in the soil :{0:2f}\".format(data['K'].mean()))\n",
    "print(\"Average Temperature in Celsuis :{0:2f}\".format(data['temperature'].mean()))\n",
    "print(\"Average Relative Humidity in % :{0:2f}\".format(data['humidity'].mean()))\n",
    "print(\"Average PH value  in the soil :{0:2f}\".format(data['ph'].mean()))\n",
    "print(\"Average Rainfall in mm :{0:2f}\".format(data['rainfall'].mean()))\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7de7aaef",
   "metadata": {},
   "source": [
    "### Summary of Statistics for each of the Crops -\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "775b6b24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "      <th>P</th>\n",
       "      <th>K</th>\n",
       "      <th>temperature</th>\n",
       "      <th>humidity</th>\n",
       "      <th>ph</th>\n",
       "      <th>rainfall</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>78</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>20.130175</td>\n",
       "      <td>81.604873</td>\n",
       "      <td>7.628473</td>\n",
       "      <td>262.717340</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>69</td>\n",
       "      <td>37</td>\n",
       "      <td>42</td>\n",
       "      <td>23.058049</td>\n",
       "      <td>83.370118</td>\n",
       "      <td>7.073454</td>\n",
       "      <td>251.055000</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>69</td>\n",
       "      <td>55</td>\n",
       "      <td>38</td>\n",
       "      <td>22.708838</td>\n",
       "      <td>82.639414</td>\n",
       "      <td>5.700806</td>\n",
       "      <td>271.324860</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>94</td>\n",
       "      <td>53</td>\n",
       "      <td>40</td>\n",
       "      <td>20.277744</td>\n",
       "      <td>82.894086</td>\n",
       "      <td>5.718627</td>\n",
       "      <td>241.974195</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>89</td>\n",
       "      <td>54</td>\n",
       "      <td>38</td>\n",
       "      <td>24.515881</td>\n",
       "      <td>83.535216</td>\n",
       "      <td>6.685346</td>\n",
       "      <td>230.446236</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>68</td>\n",
       "      <td>58</td>\n",
       "      <td>38</td>\n",
       "      <td>23.223974</td>\n",
       "      <td>83.033227</td>\n",
       "      <td>6.336254</td>\n",
       "      <td>221.209196</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    N   P   K  temperature   humidity        ph    rainfall label\n",
       "0  90  42  43    20.879744  82.002744  6.502985  202.935536  rice\n",
       "1  85  58  41    21.770462  80.319644  7.038096  226.655537  rice\n",
       "2  60  55  44    23.004459  82.320763  7.840207  263.964248  rice\n",
       "3  74  35  40    26.491096  80.158363  6.980401  242.864034  rice\n",
       "4  78  42  42    20.130175  81.604873  7.628473  262.717340  rice\n",
       "5  69  37  42    23.058049  83.370118  7.073454  251.055000  rice\n",
       "6  69  55  38    22.708838  82.639414  5.700806  271.324860  rice\n",
       "7  94  53  40    20.277744  82.894086  5.718627  241.974195  rice\n",
       "8  89  54  38    24.515881  83.535216  6.685346  230.446236  rice\n",
       "9  68  58  38    23.223974  83.033227  6.336254  221.209196  rice"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "525fe92e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aa0089254a964897a516f6b0fa052992",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(Dropdown(description='crops', options=('rice', 'maize', 'jute', 'cotton', 'coconut', 'paâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@interact\n",
    "def summary(crops = list(data['label'].value_counts().index)):\n",
    "    x = data[data['label']==crops]\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    print(\"Statistics for Nitrogen\")\n",
    "    print(\"Minimum Nitrogen required :\", x['N'].min())\n",
    "    print(\"Average Nitrogen Required :\", x['N'].mean())\n",
    "    print(\"Maximum Nitrogen Required :\", x['N'].max())\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    print(\"Statistics for Phosphorous\")\n",
    "    print(\"Minimum Phosphorous required :\", x['P'].min())\n",
    "    print(\"Average Phosphorous Required :\", x['P'].mean())\n",
    "    print(\"Maximum Phosphorous Required :\", x['P'].max())\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    print(\"Statistics for Potassuim\")\n",
    "    print(\"Minimum Potassuim required :\", x['K'].min())\n",
    "    print(\"Average Potassuim Required :\", x['K'].mean())\n",
    "    print(\"Maximum Potassuim Required :\", x['K'].max())\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    print(\"Statistics for Temperature\")\n",
    "    print(\"Minimum Temperature required :{0:2f}\".format(x['temperature'].min()))\n",
    "    print(\"Average Temperature required :{0:2f}\".format(x['temperature'].mean()))\n",
    "    print(\"Maximum Temperature required :{0:2f}\".format(x['temperature'].max()))\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    print(\"Statistics for Humidity\")\n",
    "    print(\"Minimum Humidity  required :{0:2f}\".format(x['humidity'].min()))\n",
    "    print(\"Average Humidity required :{0:2f}\".format(x['humidity'].mean()))\n",
    "    print(\"Maximum Humidity required :{0:2f}\".format(x['humidity'].max()))\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    print(\"Statistics for PH\")\n",
    "    print(\"Minimum PH  required :{0:2f}\".format(x['ph'].min()))\n",
    "    print(\"Average PH required :{0:2f}\".format(x['ph'].mean()))\n",
    "    print(\"Maximum PH required :{0:2f}\".format(x['ph'].max()))\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    print(\"Statistics for Rainfall \")\n",
    "    print(\"Minimum Rainfall  required :{0:2f}\".format(x['rainfall'].min()))\n",
    "    print(\"Average Rainfall required :{0:2f}\".format(x['rainfall'].mean()))\n",
    "    print(\"Maximum Rainfall required :{0:2f}\".format(x['rainfall'].max()))\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "928669bf",
   "metadata": {},
   "source": [
    "### Soil Condition and  Temperature effect on Crops -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f24aa984",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'rice',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'maize',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'chickpea',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'kidneybeans',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'pigeonpeas',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mothbeans',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'mungbean',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'blackgram',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'lentil',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " 'pomegranate',\n",
       " ...]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.label.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3d897197",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "29a06477e9a945318dea0c1c299aa117",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(Dropdown(description='conditions', options=('N', 'P', 'K', 'temperature', 'ph', 'humiditâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@interact\n",
    "def compare(conditions = ['N','P','K','temperature','ph','humidity','rainfall']):\n",
    "    print(\"Average Value for -\", conditions,\"is{0:2f}\".format(data[conditions].mean()))\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    print(\"Rice: {0:.2f}\".format(data[(data['label'] == 'rice')][conditions].mean()))\n",
    "    print(\"Black Gram : {0:.2f}\".format(data[(data['label'] == 'blackgram')][conditions].mean()))\n",
    "    print(\"Banana : {0:.2f}\".format(data[(data['label'] == 'banana')][conditions].mean()))\n",
    "    print(\"Jute : {0:.2f}\".format(data[(data['label'] == 'jute')][conditions].mean()))\n",
    "    print(\"Coconut : {0:.2f}\".format(data[(data['label'] == 'coconut')][conditions].mean()))\n",
    "    print(\"Apple : {0:.2f}\".format(data[(data['label'] == 'apple')][conditions].mean()))\n",
    "    print(\"Papaya : {0:.2f}\".format(data[(data['label'] == 'papaya')][conditions].mean()))\n",
    "    print(\"Muskmelon : {0:.2f}\".format(data[(data['label'] == 'muskmelon')][conditions].mean()))\n",
    "    print(\"Grapes : {0:.2f}\".format(data[(data['label'] == 'grapes')][conditions].mean()))\n",
    "    print(\"Watermelon : {0:.2f}\".format(data[(data['label'] == 'watermelon')][conditions].mean()))\n",
    "    print(\"Kidney Beans: {0:.2f}\".format(data[(data['label'] == 'blackgram')][conditions].mean()))\n",
    "    print(\"Mung beans : {0:.2f}\".format(data[(data['label'] == 'mungbean')][conditions].mean()))\n",
    "    print(\"Oranges : {0:.2f}\".format(data[(data['label'] == 'orange')][conditions].mean()))\n",
    "    print(\"Chick peas : {0:.2f}\".format(data[(data['label'] == 'chickpea')][conditions].mean()))\n",
    "    print(\"Lentils : {0:.2f}\".format(data[(data['label'] == 'lentil')][conditions].mean()))\n",
    "    print(\"Cotton : {0:.2f}\".format(data[(data['label'] == 'cotton ')][conditions].mean()))\n",
    "    print(\"Maize : {0:.2f}\".format(data[(data['label'] == 'maize')][conditions].mean()))\n",
    "    print(\"Moth beans : {0:.2f}\".format(data[(data['label'] == 'mothbeans ')][conditions].mean()))\n",
    "    print(\"Pigeon Peas : {0:.2f}\".format(data[(data['label'] == 'pigeonpeas ')][conditions].mean()))\n",
    "    print(\"Mango: {0:.2f}\".format(data[(data['label'] == 'mango ')][conditions].mean()))\n",
    "    print(\"Pomegranate : {0:.2f}\".format(data[(data['label'] == 'pomegranate')][conditions].mean()))\n",
    "    print(\"Coffee : {0:.2f}\".format(data[(data['label'] == 'coffee ')][conditions].mean()))\n",
    "    print(\"-----------------------------------------------------\")\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f73e1ebe",
   "metadata": {},
   "source": [
    "### Distrubution for Agricultural Conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "115189de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "      <th>P</th>\n",
       "      <th>K</th>\n",
       "      <th>temperature</th>\n",
       "      <th>humidity</th>\n",
       "      <th>ph</th>\n",
       "      <th>rainfall</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>78</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>20.130175</td>\n",
       "      <td>81.604873</td>\n",
       "      <td>7.628473</td>\n",
       "      <td>262.717340</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    N   P   K  temperature   humidity        ph    rainfall label\n",
       "0  90  42  43    20.879744  82.002744  6.502985  202.935536  rice\n",
       "1  85  58  41    21.770462  80.319644  7.038096  226.655537  rice\n",
       "2  60  55  44    23.004459  82.320763  7.840207  263.964248  rice\n",
       "3  74  35  40    26.491096  80.158363  6.980401  242.864034  rice\n",
       "4  78  42  42    20.130175  81.604873  7.628473  262.717340  rice"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7bc8b74c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(3, 4, 1)\n",
    "sns.displot(data['N'], color = 'royalblue')\n",
    "plt.xlabel('Ratio of Nirogen', fontsize = 12)\n",
    "plt.grid()\n",
    "\n",
    "plt.subplot(3, 4, 2)\n",
    "sns.displot(data['P'], color = 'green')\n",
    "plt.xlabel('Ratio of Phosphorous', fontsize = 12)\n",
    "plt.grid()\n",
    "\n",
    "plt.subplot(3, 4, 3)\n",
    "sns.displot(data['K'], color = 'orange')\n",
    "plt.xlabel('Ratio of Potassuim', fontsize = 12)\n",
    "plt.grid()\n",
    "\n",
    "plt.subplot(3, 4, 4)\n",
    "sns.displot(data['temperature'], color = 'black')\n",
    "plt.xlabel('Temperature', fontsize = 12)\n",
    "plt.grid()\n",
    "\n",
    "plt.subplot(2, 4, 5)\n",
    "sns.displot(data['rainfall'], color = 'darkblue')\n",
    "plt.xlabel('Rainfall', fontsize = 12)\n",
    "plt.grid()\n",
    "\n",
    "plt.subplot(2, 4, 6)\n",
    "sns.displot(data['humidity'], color = 'cyan')\n",
    "plt.xlabel('Humidity', fontsize = 12)\n",
    "plt.grid()\n",
    "\n",
    "plt.subplot(2, 4, 7)\n",
    "sns.displot(data['ph'], color = 'green')\n",
    "plt.xlabel('PH', fontsize = 12)\n",
    "plt.grid()\n",
    "\n",
    "plt.suptitle('Distrubution for Agricultural Conditions', fontsize = 20)\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf1f9d3c",
   "metadata": {},
   "source": [
    "### Crops and its relationship with Climate Condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c1f56708",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summer Crops -\n",
      "['pigeonpeas' 'mothbeans' 'blackgram' 'mango' 'grapes' 'orange' 'papaya']\n",
      "------------------------------------------\n",
      "Winter Crops -\n",
      "['maize' 'pigeonpeas' 'lentil' 'pomegranate' 'grapes' 'orange']\n",
      "------------------------------------------\n",
      "Rainy Crops -\n",
      "['rice' 'papaya' 'coconut']\n",
      "------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "print(\"Summer Crops -\")\n",
    "print(data[(data['temperature'] > 30) & (data['humidity'] > 50)]['label'].unique())\n",
    "print(\"------------------------------------------\")\n",
    "print(\"Winter Crops -\")\n",
    "print(data[(data['temperature'] < 20) & (data['humidity'] > 30)]['label'].unique())\n",
    "print(\"------------------------------------------\")\n",
    "print(\"Rainy Crops -\")\n",
    "print(data[(data['rainfall'] > 200) & (data['humidity'] > 30)]['label'].unique())\n",
    "print(\"------------------------------------------\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ccbf84c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ac5caa71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2200, 7)\n"
     ]
    }
   ],
   "source": [
    "x = data.drop(['label'], axis =1)  ## removing labels column\n",
    "x= x.values\n",
    "    \n",
    "print(x.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecf97f59",
   "metadata": {},
   "source": [
    "## Optimum number of clusters within the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3fb117cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = (10,4)\n",
    "\n",
    "wcss = []\n",
    "for i in range (1, 11):\n",
    "    km = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init =10, random_state = 0)\n",
    "    km.fit(x)\n",
    "    wcss.append(km.inertia_)\n",
    "    \n",
    "plt.plot(range(1, 11),wcss)\n",
    "plt.title('The Elbow Method', fontsize = 20)\n",
    "plt.xlabel('No of clusters')\n",
    "plt.ylabel('wcss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b85f03d5",
   "metadata": {},
   "source": [
    "### Clusters Of Each Crops\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8ddde2cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "km = KMeans(n_clusters = 4, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n",
    "y_means = km.fit_predict(x)\n",
    "\n",
    "a = data['label']\n",
    "y_means = pd.DataFrame(y_means)\n",
    "z = pd.concat([y_means,a],axis =1)\n",
    "z = z.rename(columns = {0: 'cluster'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2b10dd6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results after applying  the K Means clustering Analysis \n",
      "\n",
      "Crops in First Cluster : ['maize' 'chickpea' 'kidneybeans' 'pigeonpeas' 'mothbeans' 'mungbean'\n",
      " 'blackgram' 'lentil' 'pomegranate' 'mango' 'orange' 'papaya' 'coconut']\n",
      "---------------------------------------------------------------\n",
      "Crops in Second Cluster : ['maize' 'banana' 'watermelon' 'muskmelon' 'papaya' 'cotton' 'coffee']\n",
      "---------------------------------------------------------------\n",
      "Crops in  Third Cluster : ['grapes' 'apple']\n",
      "---------------------------------------------------------------\n",
      "Crops in  Fourth Cluster : ['rice' 'pigeonpeas' 'papaya' 'coconut' 'jute' 'coffee']\n"
     ]
    }
   ],
   "source": [
    "print(\"Results after applying  the K Means clustering Analysis \\n\")\n",
    "print(\"Crops in First Cluster :\", z[z['cluster'] == 0]['label'].unique())\n",
    "print(\"---------------------------------------------------------------\")\n",
    "print(\"Crops in Second Cluster :\", z[z['cluster'] == 1]['label'].unique())\n",
    "print(\"---------------------------------------------------------------\")\n",
    "print(\"Crops in  Third Cluster :\", z[z['cluster'] == 2]['label'].unique())\n",
    "print(\"---------------------------------------------------------------\")\n",
    "print(\"Crops in  Fourth Cluster :\", z[z['cluster'] == 3]['label'].unique())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6a67e4f",
   "metadata": {},
   "source": [
    "### Splitting Dataset for Predicitve Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ab86d5fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x: (2200, 7)\n",
      "Shape of y: (2200,)\n"
     ]
    }
   ],
   "source": [
    "y = data['label']\n",
    "x = data.drop(['label'], axis =1)\n",
    "print(\"Shape of x:\", x.shape)\n",
    "print(\"Shape of y:\", y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "78aaffb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of x Train : (1760, 7)\n",
      "The shape of x Train : (440, 7)\n",
      "The shape of y Train : (1760,)\n",
      "The shape of y Train : (440,)\n"
     ]
    }
   ],
   "source": [
    "## creating  Training and Testing Sets for Validation of Results\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state =0)\n",
    "\n",
    "print(\"The shape of x Train :\",x_train.shape)\n",
    "print(\"The shape of x Train :\", x_test.shape)\n",
    "print(\"The shape of y Train :\",y_train.shape)\n",
    "print(\"The shape of y Train :\", y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ceb1bd8a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/abi/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "## Creating a Predictive Model\n",
    "\n",
    "from sklearn.linear_model  import LogisticRegression\n",
    "\n",
    "model = LogisticRegression()\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "18b89d8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Evaluating the model performance\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "plt.rcParams['figure.figsize'] = (10,10)\n",
    "cm = confusion_matrix(y_test,y_pred)\n",
    "sns.heatmap(cm, annot = True, cmap = 'Wistia')\n",
    "plt.title('Confusion Matrix for Logistic Regression', fontsize = 15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ea11bcad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining the Classification report\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "cr = classification_report(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e24ef036",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "       apple       1.00      1.00      1.00        18\n",
      "      banana       1.00      1.00      1.00        18\n",
      "   blackgram       0.86      0.82      0.84        22\n",
      "    chickpea       1.00      1.00      1.00        23\n",
      "     coconut       1.00      1.00      1.00        15\n",
      "      coffee       1.00      1.00      1.00        17\n",
      "      cotton       0.89      1.00      0.94        16\n",
      "      grapes       1.00      1.00      1.00        18\n",
      "        jute       0.84      1.00      0.91        21\n",
      " kidneybeans       1.00      1.00      1.00        20\n",
      "      lentil       0.94      0.94      0.94        17\n",
      "       maize       0.94      0.89      0.91        18\n",
      "       mango       1.00      1.00      1.00        21\n",
      "   mothbeans       0.88      0.92      0.90        25\n",
      "    mungbean       1.00      1.00      1.00        17\n",
      "   muskmelon       1.00      1.00      1.00        23\n",
      "      orange       1.00      1.00      1.00        23\n",
      "      papaya       1.00      0.95      0.98        21\n",
      "  pigeonpeas       1.00      1.00      1.00        22\n",
      " pomegranate       1.00      1.00      1.00        23\n",
      "        rice       1.00      0.84      0.91        25\n",
      "  watermelon       1.00      1.00      1.00        17\n",
      "\n",
      "    accuracy                           0.97       440\n",
      "   macro avg       0.97      0.97      0.97       440\n",
      "weighted avg       0.97      0.97      0.97       440\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(cr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "482b9597",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "      <th>P</th>\n",
       "      <th>K</th>\n",
       "      <th>temperature</th>\n",
       "      <th>humidity</th>\n",
       "      <th>ph</th>\n",
       "      <th>rainfall</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>78</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>20.130175</td>\n",
       "      <td>81.604873</td>\n",
       "      <td>7.628473</td>\n",
       "      <td>262.717340</td>\n",
       "      <td>rice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2195</th>\n",
       "      <td>107</td>\n",
       "      <td>34</td>\n",
       "      <td>32</td>\n",
       "      <td>26.774637</td>\n",
       "      <td>66.413269</td>\n",
       "      <td>6.780064</td>\n",
       "      <td>177.774507</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2196</th>\n",
       "      <td>99</td>\n",
       "      <td>15</td>\n",
       "      <td>27</td>\n",
       "      <td>27.417112</td>\n",
       "      <td>56.636362</td>\n",
       "      <td>6.086922</td>\n",
       "      <td>127.924610</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2197</th>\n",
       "      <td>118</td>\n",
       "      <td>33</td>\n",
       "      <td>30</td>\n",
       "      <td>24.131797</td>\n",
       "      <td>67.225123</td>\n",
       "      <td>6.362608</td>\n",
       "      <td>173.322839</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2198</th>\n",
       "      <td>117</td>\n",
       "      <td>32</td>\n",
       "      <td>34</td>\n",
       "      <td>26.272418</td>\n",
       "      <td>52.127394</td>\n",
       "      <td>6.758793</td>\n",
       "      <td>127.175293</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2199</th>\n",
       "      <td>104</td>\n",
       "      <td>18</td>\n",
       "      <td>30</td>\n",
       "      <td>23.603016</td>\n",
       "      <td>60.396475</td>\n",
       "      <td>6.779833</td>\n",
       "      <td>140.937041</td>\n",
       "      <td>coffee</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2200 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        N   P   K  temperature   humidity        ph    rainfall   label\n",
       "0      90  42  43    20.879744  82.002744  6.502985  202.935536    rice\n",
       "1      85  58  41    21.770462  80.319644  7.038096  226.655537    rice\n",
       "2      60  55  44    23.004459  82.320763  7.840207  263.964248    rice\n",
       "3      74  35  40    26.491096  80.158363  6.980401  242.864034    rice\n",
       "4      78  42  42    20.130175  81.604873  7.628473  262.717340    rice\n",
       "...   ...  ..  ..          ...        ...       ...         ...     ...\n",
       "2195  107  34  32    26.774637  66.413269  6.780064  177.774507  coffee\n",
       "2196   99  15  27    27.417112  56.636362  6.086922  127.924610  coffee\n",
       "2197  118  33  30    24.131797  67.225123  6.362608  173.322839  coffee\n",
       "2198  117  32  34    26.272418  52.127394  6.758793  127.175293  coffee\n",
       "2199  104  18  30    23.603016  60.396475  6.779833  140.937041  coffee\n",
       "\n",
       "[2200 rows x 8 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "12167563",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " The Suggested Crop for given climatic condition is : ['muskmelon']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/abi/anaconda3/lib/python3.9/site-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "prediction = model.predict((np.array([[85, 58, 41, 21, 80, 7, 22]])))\n",
    "print(\" The Suggested Crop for given climatic condition is :\", prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed543309",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
